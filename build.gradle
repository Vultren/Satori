buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
    }
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'eclipse-wtp'
apply plugin: 'findbugs'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'spring-boot' 
apply plugin: 'war'


war {
    baseName = 'satori'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-hateoas')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-mobile')
    //compile('org.springframework.boot:spring-boot-starter-security')
    //compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('io.swagger:swagger-core:1.5.8')
    runtime('mysql:mysql-connector-java')
    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
    testCompile('org.springframework.boot:spring-boot-starter-test') 
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

checkstyle{
	ignoreFailures = true
	sourceSets = [sourceSets.main]
	showViolations = false
	configFile = file("$project.rootDir/config/checkstyle/checkstyle.xml")
}

checkstyleTest {
    enabled = false
    ignoreFailures = true
}

findbugs {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.rootDir/reports/findbugs")
  effort = "max"
  reportLevel = "low"
}

pmd {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.rootDir/reports/pmd")
  ruleSets = [
    'java-basic', 
    'java-braces',
    'java-codesize',
    'java-comments',
    'java-controversial',
    'java-coupling',
    'java-design',
    'java-empty',
    'java-imports',
    'java-j2ee',
    'java-javabeans',
    'java-junit',
    'java-logging-java',
    'java-naming',
    'java-optimizations',
    'java-strictexception',
    'java-strings',
    'java-sunsecure',
    'java-typeresolution',
    'java-unnecessary',
    'java-unusedcode'
  ]
}

pmdTest {
	enabled = false;
}

jacoco {
    reportsDir = file("$project.rootDir/reports/jacoco")
}

tasks.withType(Checkstyle) {
  	reports  {
        xml.enabled false
        html { 
        	enabled true
        	stylesheet resources.text.fromFile('config/checkstyle/XSL/checkstyle-noframes-sorted.xsl')
        	destination file("$project.rootDir/reports/checkstyle/checkstyle.html")
        }
    }
}

tasks.withType(FindBugs) {
  	reports  {
        xml.enabled false
        html.enabled true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}
